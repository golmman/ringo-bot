!function(e){var n={};function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(i,o,function(n){return e[n]}.bind(null,o));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=5)}([function(e,n){e.exports={EMPTY:0,MARKED:1,BLUE_DISK:1e3,RED_DISK:2e3,BLUE_RING:3e3,RED_RING:4e3,MAX_DISKS:10,MAX_RINGS:4,DROP_DISK:-1,GRID_SIZE:256,GRID_SIZE2:65536,BLUE:0,RED:1,OPPONENT_PHASE:0,PICK_DISK_PHASE:1,DROP_DISK_PHASE:2,DROP_RING_PHASE:3}},function(e,n,t){const{intDiv:i}=t(3),{EMPTY:o,BLUE_DISK:s,RED_DISK:r,BLUE_RING:d,RED_RING:a,GRID_SIZE:c}=t(0);function u(e,n,t){e.grid[t]=n}function l(e,n){const t=e.grid[n];return e.grid[n]=o,t}function f(e,n,t){u(e,n,t),e.blueDisks.add(t)}function v(e,n,t){u(e,n,t),e.redDisks.add(t)}function g(e,n,t){u(e,n,t),e.blueRings.add(t)}function k(e,n,t){u(e,n,t),e.redRings.add(t)}function D(e){return 1===i(e,1e3)}function R(e){return 2===i(e,1e3)}function b(e){return 3===i(e,1e3)}function h(e){return 4===i(e,1e3)}function M(e){return`[34m${e}[0m`}function p(e){return`[31m${e}[0m`}function w(e,n){e.duplicationMarkers=[],e.grid=new Array(c*c).fill(o),e.blueDisks=new Set,e.redDisks=new Set,e.blueRings=new Set,e.redRings=new Set,e.isBlueTurn=!0;const t=c/2;return function(e){return e.split("\n").map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0).map(e=>e.split(""))}(n).forEach((n,i)=>{n.forEach((n,o)=>{const u=c*(i+t)+o+t;switch(n){case"b":f(e,s+e.blueDisks.size,u);break;case"r":v(e,r+e.redDisks.size,u);break;case"B":g(e,d+e.blueRings.size,u);break;case"R":k(e,a+e.redRings.size,u)}})}),e}e.exports={addBlueDisk:f,addBlueRing:g,addRedDisk:v,addRedRing:k,deleteBlueDisk:function(e,n){const t=l(e,n);return e.blueDisks.delete(n),t},deleteBlueRing:function(e,n){const t=l(e,n);return e.blueRings.delete(n),t},deleteRedDisk:function(e,n){const t=l(e,n);return e.redDisks.delete(n),t},deleteRedRing:function(e,n){const t=l(e,n);return e.redRings.delete(n),t},getCoords:function(e){return{x:e%c,y:i(e,c)}},getGridIndex:function({x:e,y:n}){return c*n+e},initBoard:function(e){w(e,"\n        BRBbbb0\n        R0Rbbb0\n        BRBbbbb\n        rrr0000\n        rrr0000\n        rrr0000\n        00r0000\n    ")},isBlueDisk:D,isBlueRing:b,isRedDisk:R,isRedRing:h,printBoard:function(e){const n={xMin:c,yMin:c,xMax:0,yMax:0};e.grid.forEach((e,t)=>{if(e){const e=t%c,o=i(t,c);e<n.xMin&&(n.xMin=e),o<n.yMin&&(n.yMin=o),e>n.xMax&&(n.xMax=e),o>n.yMax&&(n.yMax=o)}});for(let t=n.yMin;t<=n.yMax;t+=1){const i=c*t+n.xMin,o=c*t+n.xMax+1;e.grid.slice(i,o).map(e=>{return D(n=e)?M("â€¢"):R(n)?p("â€¢"):b(n)?M("O"):h(n)?p("O"):"Â·";var n}).join(" ")}},setupBoard:w}},function(e,n,t){const i=t(0),o={};e.exports={context:o,resetContext:function(){o.canvas=null,o.events={mouseWheel:null,mouseDown:null,mouseMove:{clientX:0,clientY:0},isMouseDown:!1,phase:i.OPPONENT_PHASE},o.draw={move:{diskFrom:-1,diskTo:-1,ringTo:-1},generatedMoves:null,pickDiskMoves:null,dropDiskMoves:null,dropRingMoves:null},o.board={canvasX:100,canvasY:100,tileSize:100,botColor:i.RED,isBlueTurn:!0,activeDisks:null,duplicationMarkers:[],grid:[],blueDisks:new Set,redDisks:new Set,blueRings:new Set,redRings:new Set}}}},function(e,n){e.exports={getRandomInt:function(e){return Math.floor(Math.random()*e)},intDiv:function(e,n){return e/n|0}}},function(e,n,t){const{isBlueRing:i}=t(1),{context:o}=t(2),{getCoords:s}=t(1),{GRID_SIZE:r,OPPONENT_PHASE:d,PICK_DISK_PHASE:a,DROP_DISK_PHASE:c,DROP_RING_PHASE:u}=t(0);function l({x:e,y:n}){const{canvasX:t,canvasY:i,tileSize:s}=o.board;return{x:t+(e-r/2)*s,y:i+(n-r/2)*s}}function f(e,{x:n,y:t}){const{tileSize:i}=o.board;e.beginPath(),e.fillStyle="rgb(24, 24, 160)",e.arc(n+i/2,t+i/2,.3*i,0,2*Math.PI),e.fill()}function v(e,{x:n,y:t}){const{tileSize:i}=o.board;e.beginPath(),e.fillStyle="rgb(160, 24, 24)",e.arc(n+i/2,t+i/2,.3*i,0,2*Math.PI),e.fill()}function g(e,{x:n,y:t}){const{tileSize:i}=o.board;e.beginPath(),e.strokeStyle="rgb(24, 24, 160)",e.lineWidth=.1*i,e.arc(n+i/2,t+i/2,.4*i,0,2*Math.PI),e.stroke()}function k(e,{x:n,y:t}){const{tileSize:i}=o.board;e.beginPath(),e.strokeStyle="rgb(160, 24, 24)",e.lineWidth=.1*i,e.arc(n+i/2,t+i/2,.4*i,0,2*Math.PI),e.stroke()}function D(e){!function(e){const{blueDisks:n,isBlueTurn:t}=o.board,{move:i}=o.draw;if(n.forEach(n=>{const t=l(s(n));i.diskFrom!==n&&f(e,t)}),i.diskTo>0&&t){const n=l(s(i.diskTo));f(e,n)}}(e),function(e){const{redDisks:n,isBlueTurn:t}=o.board,{move:i}=o.draw;if(n.forEach(n=>{const t=l(s(n));i.diskFrom!==n&&v(e,t)}),i.diskTo>0&&!t){const n=l(s(i.diskTo));v(e,n)}}(e),function(e){const{blueRings:n}=o.board,{move:t}=o.draw;n.forEach(n=>{const i=l(s(n));t.diskTo!==n&&g(e,i)})}(e),function(e){const{redRings:n}=o.board,{move:t}=o.draw;n.forEach(n=>{const i=l(s(n));t.diskTo!==n&&k(e,i)})}(e)}e.exports={redraw:function(){const e=o.canvas.getContext("2d");e.clearRect(0,0,o.canvas.width,o.canvas.height),function(e){const{tileSize:n}=o.board,{phase:t}=o.events;let i=new Set;t!==d&&(t===a&&(i=o.draw.pickDiskMoves),t===c&&(i=o.draw.dropDiskMoves),t===u&&(i=o.draw.dropRingMoves),i.forEach(t=>{const i=l(s(t));e.fillStyle="rgb(16, 64, 16)",e.fillRect(i.x,i.y,n,n)}))}(e),function(e){const{tileSize:n}=o.board,t=o.board.canvasX%n,i=o.board.canvasY%n,s=o.canvas.width,r=o.canvas.height;e.strokeStyle="rgb(160, 160, 160)",e.lineWidth=1;for(let i=t;i<=s;i+=n)e.beginPath(),e.moveTo(i,0),e.lineTo(i,r),e.stroke();for(let t=i;t<=r;t+=n)e.beginPath(),e.moveTo(0,t),e.lineTo(s,t),e.stroke()}(e),function(e){const{canvasX:n,canvasY:t,tileSize:i}=o.board;e.strokeStyle="rgb(255, 255, 255)",e.lineWidth=3,e.beginPath(),e.moveTo(n-i,t),e.lineTo(n+i,t),e.stroke(),e.beginPath(),e.moveTo(n,t-i),e.lineTo(n,t+i),e.stroke()}(e),function(e){const{canvasX:n,canvasY:t,tileSize:i}=o.board,s=o.canvas.getBoundingClientRect(),r=o.events.mouseMove.clientX-s.left,d=o.events.mouseMove.clientY-s.top,a=r-n,c=d-t,u=a>0?r-a%i:r-a%i-i,l=c>0?d-c%i:d-c%i-i;e.fillStyle="rgb(48, 48, 48)",e.fillRect(u,l,i,i)}(e),D(e),function(e){const{phase:n}=o.events,{move:t}=o.draw,{tileSize:s,isBlueTurn:r,grid:l}=o.board,D=o.canvas.getBoundingClientRect(),R=o.events.mouseMove.clientX-D.left,b=o.events.mouseMove.clientY-D.top;if(n!==d&&n!==a){if(n===c){const n=R-s/2,t=b-s/2;r?f(e,{x:n,y:t}):v(e,{x:n,y:t})}if(n===u){const n=R-s/2,o=b-s/2;i(l[t.diskTo])?g(e,{x:n,y:o}):k(e,{x:n,y:o})}}}(e)}}},function(e,n,t){const{context:i,resetContext:o}=t(2),{initBoard:s}=t(1),{redraw:r}=t(4),{handleKeyDown:d,handleMouseClick:a,handleMouseDown:c,handleMouseMove:u,handleMouseUp:l,handleMouseWheel:f}=t(6);function v(){const e=document.getElementById("gameCanvas");e.width=.8*window.innerWidth,e.height=.8*window.innerHeight,i.canvas=e,r()}function g(e){o(),s(i.board),v()}window.addEventListener("resize",v),window.addEventListener("keydown",d),window.addEventListener("click",a),window.addEventListener("mousedown",c),window.addEventListener("mousemove",u),window.addEventListener("mouseup",l),window.addEventListener("wheel",f),window.onload=()=>g(),window.restartGame=g},function(e,n,t){const{context:i}=t(2),{redraw:o}=t(4),{generateMoves:s,makeMove:r}=t(7),{intDiv:d}=t(3),{OPPONENT_PHASE:a,PICK_DISK_PHASE:c,DROP_DISK_PHASE:u,DROP_RING_PHASE:l,MAX_DISKS:f,GRID_SIZE:v}=t(0);e.exports={handleKeyDown:function(e){const{phase:n}=i.events;70===e.keyCode&&n===a&&(i.draw.generatedMoves=s(i.board),function(){const{generatedMoves:e}=i.draw;i.draw.pickDiskMoves=new Set;for(let n=0;n<e.length;n+=1)-1!==e[n].diskFrom&&i.draw.pickDiskMoves.add(e[n].diskFrom)}(),function(){const{generatedMoves:e}=i.draw;i.draw.dropDiskMoves=new Set;for(let n=0;n<e.length;n+=1)i.draw.dropDiskMoves.add(e[n].diskTo)}(),i.draw.move={diskFrom:-1,diskTo:-1,ringTo:-1},i.board.activeDisks.size<f?i.events.phase=u:i.events.phase=c,o())},handleMouseClick:function(e){const{phase:n}=i.events;if(n===a)return;const{pickDiskMoves:t,dropDiskMoves:s,dropRingMoves:f}=i.draw,g=i.canvas.getBoundingClientRect(),k=function({x:e,y:n}){const{canvasX:t,canvasY:o,tileSize:s}=i.board,r=(e-t>0?d(e-t,s):d(e-t,s)-1)+v/2,a=n-o>0?d(n-o,s):d(n-o,s)-1;return v*(a+v/2)+r}({x:e.clientX-g.left,y:e.clientY-g.top});2===e.detail&&(n===c?t.has(k)&&(i.draw.move.diskFrom=k,i.events.phase=u,o()):n===u?s.has(k)&&(i.draw.move.diskTo=k,i.events.phase=l,function(e,n){const{generatedMoves:t}=i.draw;i.draw.dropRingMoves=new Set;for(let o=0;o<t.length;o+=1)e===t[o].diskFrom&&n===t[o].diskTo&&i.draw.dropRingMoves.add(t[o].ringTo)}(i.draw.move.diskFrom,i.draw.move.diskTo),o()):n===l&&f.has(k)&&(i.draw.move.ringTo=k,r(i.board,i.draw.move),i.events.phase=a,i.board.isBlueTurn=!i.board.isBlueTurn,i.draw.move={diskFrom:-1,diskTo:-1,ringTo:-1},o()))},handleMouseDown:function(e){const{screenX:n,screenY:t}=e;i.events.mouseDown={screenX:n,screenY:t},i.events.isMouseDown=!0},handleMouseMove:function(e){if(i.events.isMouseDown){const n=e.screenX-i.events.mouseMove.screenX,t=e.screenY-i.events.mouseMove.screenY;i.board.canvasX+=n,i.board.canvasY+=t}const{clientX:n,clientY:t,screenX:s,screenY:r}=e;i.events.mouseMove={clientX:n,clientY:t,screenX:s,screenY:r},o()},handleMouseUp:function(e){const{screenX:n,screenY:t}=e;i.events.mouseUp={screenX:n,screenY:t},i.events.isMouseDown=!1},handleMouseWheel:function(e){const n=i.canvas.width,t=i.canvas.height,s=i.board.canvasX,r=i.board.canvasY;let{tileSize:d}=i.board;const a=(n/2-s)/d,c=(t/2-r)/d;d-=e.deltaY,d>100&&(d=100),d<10&&(d=10),i.board.tileSize=d,i.board.canvasX=n/2-d*a,i.board.canvasY=t/2-d*c,o()}}},function(e,n,t){const{getRandomInt:i}=t(3),{addBlueDisk:o,addBlueRing:s,addRedDisk:r,addRedRing:d,deleteBlueDisk:a,deleteBlueRing:c,deleteRedDisk:u,deleteRedRing:l,isBlueRing:f}=t(1),{BLUE_DISK:v,DROP_DISK:g,EMPTY:k,GRID_SIZE:D,MARKED:R,MAX_DISKS:b,MAX_RINGS:h,RED_DISK:M}=t(0);function p(e,n,t){return e.grid[n]===k||e.grid[n]!==R&&n===t}function w(e,n,t,i,o){if(n===t)return;const s=function(e,n,t){const{grid:i,duplicationMarkers:o}=e,s=[];let r=n-D;return p(e,r,t)&&(s.push(r),o.push({index:r,piece:i[r]}),i[r]=R),r=n-1,p(e,r,t)&&(s.push(r),o.push({index:r,piece:i[r]}),i[r]=R),r=n+1,p(e,r,t)&&(s.push(r),o.push({index:r,piece:i[r]}),i[r]=R),r=n+D,p(e,r,t)&&(s.push(r),o.push({index:r,piece:i[r]}),i[r]=R),s}(e,t,i);for(let e=0;e<s.length;e+=1)o.push({diskFrom:i,diskTo:n,ringTo:s[e]})}function S(e,n,t,i){const{blueRings:o,redRings:s}=e;o.forEach(o=>{w(e,n,o,t,i)}),s.forEach(o=>{w(e,n,o,t,i)}),function(e){const{duplicationMarkers:n,grid:t}=e;n.forEach(({index:e,piece:n})=>{t[e]=n}),e.duplicationMarkers=[]}(e)}function m(e,n,t){n.forEach(n=>{e.activeDisks.size<b?S(e,n,g,t):function(e,n,t){(function(e){return e.activeDisks})(e).forEach(i=>{S(e,n,i,t)})}(e,n,t)})}e.exports={generateMoves:function(e){const n=[];return e.activeDisks=e.isBlueTurn?e.blueDisks:e.redDisks,m(e,e.blueRings,n),m(e,e.redRings,n),n},generateRandomMove:function(e){const n={};e.activeDisks=e.isBlueTurn?e.blueDisks:e.redDisks,e.activeDisks.size<b?n.diskFrom=-1:n.diskFrom=Array.from(e.activeDisks)[i(b)];const t=Array.from(e.blueRings).concat(Array.from(e.redRings)),o=2*h,s=i(o);n.diskTo=t.splice(s,1)[0];for(let s=0;s<o-1;s+=1){const o=i(t.length),s=t.splice(o,1)[0],r=[1,-1,D,-D];for(let t=0;t<4;t+=1){const t=i(r.length),o=r.splice(t,1)[0];if(e.grid[s+o]===k)return n.ringTo=s+o,n}}return null},makeMove:function(e,{diskFrom:n,diskTo:t,ringTo:i}){const g=e.isBlueTurn?v+e.blueDisks.size:M+e.redDisks.size,{addDisk:k,deleteDisk:D}=e.isBlueTurn?{addDisk:o,deleteDisk:a}:{addDisk:r,deleteDisk:u},R=e.grid[t],{addRing:b,deleteRing:h}=f(R)?{addRing:s,deleteRing:c}:{addRing:d,deleteRing:l},p=n>0?D(e,n):g,w=h(e,t);return k(e,p,t),b(e,w,i),1},unmakeMove:function(e,{diskFrom:n,diskTo:t,ringTo:i}){return 1}}}]);